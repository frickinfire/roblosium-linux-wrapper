#!/usr/bin/env bash
#
#    Copyright 2015 Jonathan Alfonso <alfonsojon1997@gmail.com>
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Some internal functions to make wine more useful to the wrapper.
# This allows the wrapper to know what went wrong and where, without excessive code.
# Note: functions prefixed with "r" indicate wrappers that extend system functionality.
spawndialog () {
	[[ -x "$(which zenity)" ]] || {
		printf '%b\n' "Missing dependency! Please install \"zenity\", then try again."
		exit 1
	}
	zenity \
		--no-wrap \
		--window-icon="$RBXICON" \
		--title="$rlwversionstring" \
		--"$1" \
		--text="$2" 2&> /dev/null
}

rwine () {
	printf '%b\n' "> rwine: calling wine with arguments \"$(printf "%s " "$@")\""
	if [[ "$1" = "--silent" ]]; then
		$WINE "${@:2}" && rwineserver --wait
	else
		$WINE "$@" && rwineserver --wait; [[ "$?" = "0" ]] || {
			spawndialog error "wine closed unsuccessfully.\nSee terminal for details. (exit code $?)"
			exit $?
	}
	fi
}
rwineboot () {
	printf '%b\n' " > Calling wineboot..."
	$winebootbin; [[ "$?" = "0" ]] || {
		spawndialog error "wineboot closed unsuccessfully.\nSee terminal for details. (exit code $?)"
		exit $?
	}
}
rwineserver () {
	printf '%b\n' "> rwineserver: calling wineserver with arguments \"$(printf "%s " "$@")\""
	$wineserverbin "$@"; [[ "$?" = "0" ]] || {
		spawndialog error "wineserver closed unsuccessfully.\nSee terminal for details. (exit code $?)"
		exit $?
	}
}
rwget () {
	printf '%b\n' "> rwget: calling wget with arguments \"$(printf "%s " "$@")\""
	[[ -x "$(which wget)" ]] || {
		spawndialog error "Missing dependency! Please install wget, then try again."
	}
	wget "$@" 2>&1 | sed -u 's/.* \([0-9]\+%\)\ \+\([0-9.]\+.\) \(.*\)/\1\n# Downloading at \2\/s, ETA \3/' | \
		zenity \
			--progress \
			--window-icon="$RBXICON" \
			--title='Downloading' \
			--auto-close \
			--no-cancel \
			--width=450 \
			--height=120 2&>/dev/null
	[[ "$?" = "0" ]] || {
		spawndialog error "wget download failed. \nSee terminal for details. (exit code $?)"
		exit $?
	}
}
rwinetricks () {
	printf '%b\n' "> rwinetricks: calling winetricks with arguments \"$(printf "%s " "$@")\""

	# For consistency purposes, we'll use our own bundled winetricks version.
	if [[ "$WRAPPER_DIR" == "/usr/bin" ]]; then
		winetricksbin="/usr/lib/roblox-linux-wrapper/winetricks"
	else
		winetricksbin="thirdparty/winetricks/src/winetricks"
	fi
	printf '%b\n' "> rwinetricks: winetricks path set to $winetricksbin"
	$winetricksbin "$@"
	[[ "$?" = "0" ]] || {
		spawndialog error "winetricks failed. \nSee terminal for details. (exit code $?)"
		exit $?
	}
}

roblox-install () {
	if [[ ! -d "$WINEPREFIX/drive_c" ]]; then
		spawndialog question 'A working Roblox wineprefix was not found.\nWould you like to install one?'
		if [[ $? = "0" ]]; then
			rm -rf "$WINEPREFIX"
			# Make sure our directories really exist
			mkdir -p "$HOME/.local/share/wineprefixes"
			rwineboot
			rwinetricks ddr=gdi sound=alsa
				# ddr=gdi:	Vastly improves performance, may cause graphical problems in mutter/gala
				# sound=alsa:	Fix for crackling sound under Ubuntu 14.04
			[[ "$?" = 0 ]] || {
				spawndialog error "Wine prefix not generated successfully.\nSee terminal for more details. (exit code $?)"
				exit $?
			}
			wget -N -r --no-parent -Aexe http://download.cdn.mozilla.net/pub/mozilla.org/firefox/releases/latest-esr/win32/en-US/ -nd -P /tmp/Firefox-Setup/
			chmod +x /tmp/Firefox-Setup/*.exe
			WINEDLLOVERRIDES="winebrowser.exe,winemenubuilder.exe=" rwine /tmp/Firefox-Setup/*.exe /SD | zenity \
				--window-icon="$RBXICON" \
				--title='Installing Mozilla Firefox' \
				--text='Installing Mozilla Firefox Browser ...' \
				--progress \
				--pulsate \
				--no-cancel \
				--auto-close 2&>/dev/null
			rwget http://roblox.com/install/setup.ashx -O /tmp/RobloxPlayerLauncher.exe
			chmod +x /tmp/RobloxPlayerLauncher.exe
			WINEDLLOVERRIDES="winemenubuilder.exe=" rwine /tmp/RobloxPlayerLauncher.exe
		else
			exit 1
		fi
	fi
}

playerwrapper () {
	# More than one version of RobloxProxy.dll can be installed in one Wineprefix at the same time
	# due to ROBLOX's auto-updating system. The old method of loading RobloxProxy.dll using globs
	# was incorrect, and would pass multiple DLL paths to regsvr32 if there were more than
	# one on the system. Here, we'll use a bit of timestamp hackery and sorting to find the NEWEST
	# RobloxProxy.dll, and load that instead.

	# The old, incorrect behavior, would've passed something like this to regsvr32 (paths separated
	# by a newline), which would obviously raise errors.
	# regsvr32 /i '/home/glolol/.local/share/wineprefixes/roblox-wine/drive_c/users/glolol/Local Settings/Application Data/RobloxVersions/version-7c0f71fde5c44113/RobloxProxy.dll'
	# '/home/glolol/.local/share/wineprefixes/roblox-wine/drive_c/users/glolol/Local Settings/Application Data/RobloxVersions/version-e7d5859bbf11477d/RobloxProxy.dll'

	DLL="$(find "$WINEPREFIX" -iname 'RobloxProxy.dll' -printf "%T+\t%p\n" | sort -nr | cut -f 2 | head -n 1)"
	if [[ -z "$DLL" ]]; then
		spawndialog error 'Could not find RobloxProxy.dll in the wineprefix. Please make sure ROBLOX is installed correctly by running "Reinstall ROBLOX".\n\nIf this message reappears, it is probably a bug (report it to us!).'
		exit 1
	fi
	rwine regsvr32 /i "$DLL"
	if [[ "$1" = legacy ]]; then
		GAMEURL=$(zenity \
				--title="$rlwversionstring" \
				--window-icon="$RBXICON" \
				--entry \
				--text='Paste the URL for the game here.' \
				--ok-label='Play' \
				--width=450 \
				--height=122)
			GAMEID=$(cut -f 5 -d '/' <<< "$GAMEURL")
		if [[ -n "$GAMEID" ]]; then
			WINEDLLOVERRIDES="d3d11.dll=" rwine "$(find "$WINEPREFIX" -name RobloxPlayerBeta.exe)" --id "$GAMEID"
		else
			spawndialog warning "Invalid game URL."
			return
		fi
	else
		WINEDLLOVERRIDES="d3d11.dll=" rwine "$WINEPREFIX/drive_c/Program Files/Mozilla Firefox/firefox.exe" "http://www.roblox.com/Games.aspx"
	fi
}

wineinitialize () {
	# Evaluate the Wine path selection, and base the wineboot/wineserver
	# paths off that.
	source "$HOME/.rlw/wine_choice"
	winebootbin="$(dirname "$WINE")/wineboot"
	wineserverbin="$(dirname "$WINE")/wineserver"
	for x in "$WINE" "$winebootbin" "$wineserverbin"; do
		if [[ -x "$x" ]]; then
			printf "%b\n" "$(basename "$x") path set to $x"
		else
			spawndialog error "Could not find $(basename "$x") at $x. Are you sure a copy is installed there?"
			winechooser
			break
		fi
	done
	[[ "$($WINE --version | sed 's/.*-//')" > "1.7.27" ]] || {
		spawndialog error "Your copy of Wine is too old. Please install version 1.7.28 or greater.\n(expected 1.7.28, got $(wine --version | sed 's/.*-//'))"
		exit 1
	}
}

winechooser () {
	sel=$(zenity \
			--title "Wine Release Selection" \
			--width=480 \
			--height=250 \
			--cancel-label='Exit' \
			--list \
			--text 'Select the version of Wine you want to use:' \
			--radiolist \
			--column '' \
			--column 'Options' \
			TRUE 'Automatic detection (via $PATH)' \
			FALSE '/usr/bin/wine' \
			FALSE '/opt/wine-staging/bin/wine' \
			FALSE 'Enter custom Wine path...')
	case $sel in
		'Enter custom Wine path...')
			WINE=$(zenity --title "Wine Release Selection" \
					  --text "Enter custom Wine path:" --entry);;
		'Automatic detection (via $PATH)')
			# Here, we will literally save '$(which wine)' as the path
			# so it changes dynamically and isn't immediately evaluated.
			WINE='$(which wine)'
			real_wine="$(eval "echo $WINE")"
			winebootbin="$(dirname "$real_wine")/wineboot"
			wineserverbin="$(dirname "$real_wine")/wineserver"
			for x in "$real_wine" "$winebootbin" "$wineserverbin"; do
				if [[ ! -x "$x" ]]; then
					spawndialog error "Missing dependencies! Please install wine somewhere in "'$PATH'", or select a custom path instead.\nDetails: Could not find $(basename "$x") at $x. Are you sure a copy is installed there?"
					exit 1
				fi
			done;;
		*)
			WINE="$sel"
	esac
	printf "%b\n" "Wine path set to: $WINE"
	if [[ -z "$WINE" ]]; then
		printf "%b\n" "Clearing Wine choice..."
		rm -f "$HOME/.rlw/wine_choice"
		spawndialog error "You must enter a valid path."
		winechooser
	else
		printf "%b\n" "Saving Wine choice to ~/.rlw/wine_choice"
		mkdir -p "$HOME/.rlw/"
		echo "WINE=$WINE" > "$HOME/.rlw/wine_choice"
	fi
	wineinitialize
}

main () {
	rm -f $HOME/Desktop/ROBLOX*.lnk
	rm -rf "$HOME/.local/share/applications/wine/Programs/Roblox"
	sel=$(zenity \
		--title="$rlwversionstring" \
		--window-icon="$RBXICON" \
		--width=480 \
		--height=300 \
		--cancel-label='Exit' \
		--list \
		--text 'What option would you like?' \
		--radiolist \
		--column '' \
		--column 'Options' \
		TRUE 'Play Roblox' \
		FALSE 'Play Roblox (Legacy Mode)' \
		FALSE 'Roblox Studio' \
		FALSE 'Select Wine Release' \
		FALSE 'Reinstall Roblox' \
		FALSE 'Uninstall Roblox' \
		FALSE 'Visit the GitHub page' 2>/dev/null )
	case $sel in
	'Play Roblox')
		playerwrapper; main;;
	'Play Roblox (Legacy Mode)')
		playerwrapper legacy; main;;
	'Roblox Studio')
		WINEDLLOVERRIDES="msvcp110.dll,msvcr110.dll=n,b;d3d11.dll=" rwine "$WINEPREFIX/drive_c/users/$USER/Local Settings/Application Data/RobloxVersions/RobloxStudioLauncherBeta.exe" -ide
		main ;;
	'Reinstall Roblox')
		spawndialog question 'Are you sure you would like to reinstall?'
		if [[ "$?" = "0" ]]; then
			rm -rf "$HOME/.rlw"
			$wineserverbin -k
			rm -rf "$WINEPREFIX"
			roblox-install; main
		else
			main
		fi;;
	'Uninstall Roblox')
		spawndialog question 'Are you sure you would like to uninstall?'
		if [[ "$?" = "0" ]]; then
			xdg-desktop-menu uninstall "roblox.desktop"
			rm -rf "$HOME/.rlw"
			rm -rf "$HOME/.local/share/icons/roblox.png"
			rm -rf "$HOME/.local/share/icons/hicolor/512x512/apps/roblox.png"
			rm -rf "$WINEPREFIX"
			text='Roblox has been uninstalled successfully.'
			[[ "$WRAPPER_DIR" == "/usr/bin" ]] && text+="\nTo uninstall Roblox Linux Wrapper and not just the Roblox Wineprefix, please use your package manager."
			spawndialog info "$text"

			exit
		else
			main
		fi;;
	'Select Wine Release')
		winechooser
		main;;
	'Visit the GitHub page')
		xdg-open https://github.com/roblox-linux-wrapper/roblox-linux-wrapper
		main
	esac
}

WRAPPER_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
cd "$WRAPPER_DIR"

# Define some variables
if [[ -d ".git" ]]; then
	rlwversion="$(git describe --tags)"
	git submodule init
	git submodule update
elif [[ "$WRAPPER_DIR" == "/usr/bin" ]]; then
	rlwversion="$(cat /usr/lib/roblox-linux-wrapper/version)"
else
	rlwversion='version-unknown'
fi
export WINEARCH=win32

export WINEPREFIX="$HOME/.local/share/wineprefixes/roblox-wine"
export PULSE_LATENCY_MSEC=60 # Workaround fix for crackling sound (variable used by wine)

rlwversionstring="Roblox Linux Wrapper $rlwversion"
printf '%b\n' "$rlwversionstring"

# Don't allow running as root
if [ "$(id -u)" == "0" ]; then
	spawndialog error "Roblox Linux Wrapper should not be ran with root permissions."
	exit 1
fi

# Make sure wine release is defined before continuing
if [[ ! -f "$HOME/.rlw/wine_choice" ]]; then
	printf "%b\n" "No Wine path has been saved yet, starting winechooser..."
	winechooser
fi
wineinitialize

roblox-install && main
